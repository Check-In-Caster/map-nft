generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Locations {
  location_id  String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coordinates  Json?
  location     String?
  city         String?
  country      String?
  image        String?
  category     String?
  rating       Float?
  map_url      String?
  place_id     String?        @unique
  latitude     Decimal?       @db.Decimal
  longitude    Decimal?       @db.Decimal
  address      String?
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  PropertyInfo PropertyInfo[]
}

model PropertyInfo {
  property_id   String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  score         Decimal?        @db.Decimal
  location_info String?
  country       String?         @db.VarChar(100)
  ratings       Decimal?        @db.Decimal
  location_id   String?         @db.Uuid
  token_id      Int?
  total_minted  Decimal?        @default(0) @db.Decimal
  reviews       Decimal?        @db.Decimal
  type          String?
  Locations     Locations?      @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_propertyinfo_locations")
  PropertySales PropertySales[]
}

model PropertySales {
  sale_id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  property_id    String?       @db.Uuid
  token_id       String        @db.VarChar(255)
  wallet_address String        @db.VarChar(255)
  created_at     DateTime?     @default(now()) @db.Timestamp(6)
  updated_at     DateTime?     @default(now()) @db.Timestamp(6)
  tx_hash        String?
  quantity       Int?          @default(1) @db.SmallInt
  category       String?       @db.VarChar(255)
  PropertyInfo   PropertyInfo? @relation(fields: [property_id], references: [property_id], onDelete: NoAction, onUpdate: NoAction)
}

model Maps {
  map_id         String          @id @default(uuid()) @db.Uuid
  name           String
  slug           String          @unique
  description    String?
  thumbnail      String?
  wallet_address String
  map_emoji      String?
  token_id       String
  total_minted   Decimal?        @default(0) @db.Decimal
  token_gated    Boolean?        @default(false)
  eth_amount     String?
  MapsCreator    MapsCreator     @relation(fields: [wallet_address], references: [wallet_address], onDelete: NoAction, onUpdate: NoAction)
  MapsCollected  MapsCollected[]
  MapsLiked      MapsLiked[]
  MapsPlaces     MapsPlaces[]
}

model MapsPlaces {
  map_id      String  @db.Uuid
  description String?
  property_id String  @db.Uuid
  map         Maps    @relation(fields: [map_id], references: [map_id])

  @@id([map_id, property_id])
}

model MapsLiked {
  map_id         String @db.Uuid
  wallet_address String
  map            Maps   @relation(fields: [map_id], references: [map_id])

  @@id([map_id, wallet_address])
}

model MapsCollected {
  collected_id   String   @id @default(uuid()) @db.Uuid
  map_id         String   @db.Uuid
  wallet_address String
  token_id       String
  quantity       Int
  tx_hash        String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  map            Maps     @relation(fields: [map_id], references: [map_id])
}

model MapsCreator {
  wallet_address String  @id
  creator_bio    String?
  name           String?
  profile_image  String?
  Maps           Maps[]
}

model Settings {
  id    Int     @id @default(autoincrement())
  name  String?
  value String?
}

model Checkin {
  checkin_id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fid        String
}
